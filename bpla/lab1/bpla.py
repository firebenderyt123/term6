from classes.BPLA import BPLA
import numpy as np

time = 100

# Головні моменти інерції МК
I = np.array([  # noqa
    1.8,
    2.8,
    3.0
])
m = 18.0  # маса БПЛА, кг
dt = 0.01  # часовий такт оновлення значень
J = 0.00016  # момент інерції рухомої частини електричногодвигуна (кг∙м2)
J0 = 0.04  # Момент інерції рухомою частини ДВЗ
Kf = 0.0005  # Коефіцієнт силової характеристики ЕД
Kf0 = 0.01  # Коефіцієнт силової характеристики ДВЗ
Km = 0.0001  # Коефіцієнт моментної характеристики ЕД
Km0 = 0.0004  # Коефіцієнт моментної характеристики ДВз
p = np.array([
    np.array([0.0, 0.0, 0.0]),
    np.array([0.5, 0.0, -0.5]),
    np.array([0.5, 0.0, 0.5]),
    np.array([-0.5, 0.0, 0.5]),
    np.array([-0.5, 0.0, -0.5]),
    np.array([-1.5, 0.0, 0.0]),
])  # радіус-вектори розташування ДВЗ та ЕД в ЗСК (м)

# Силя тяжіння
G = np.array([
    0.0,
    -9.81,
    0.0
])

# Экспериментально отримані коефіцієнти опору повітря
Ks = np.array([
    0.1,
    0.1,
    0.1
])

# Потрібна висота та  потрібні  координати
H_ = 170
end_pos = np.array([
    1500,
    0,
    800
])

Vx_ = 10  # м/с значення  поперечної  швидкості
Vymax = 2  # м/с Максимально допустима  швидкість  вертикального  руху
Vz_ = 10  # м/с значення  поперечної  швидкості

# Жорсткість пружини ????
c = np.array([1, 1, 1, 1, 1, 1])

# Початкові умови

pos = np.array([
    0.0,
    50.0,
    0.0
])
v = np.array([
    0.0,
    0.0,
    0.0
])

psi = 0.0
teta = 0.0
gamma = 0.0
Om = np.array([0.0, 0.0, 0.0])  # вектор кутової швидкості МК
eps = np.array([
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0
])
# omega = np.array([
#     21.0 * 2 * np.pi,
#     10.0 * 2 * np.pi,
#     10.0 * 2 * np.pi,
#     10.0 * 2 * np.pi,
#     10.0 * 2 * np.pi,
#     17.0 * 2 * np.pi
# ])

# omega = np.array([  # |psi| + |teta| + |gamma| = 77.6296528769202 за 1 сек
#     20.01037516,
#     9.36009908,
#     9.367015,
#     10.97546476,
#     10.9549073,
#     16.01203586
# ]) * 2 * np.pi

# omega = np.array([  # |psi| + |teta| + |gamma| = 2.4427473213024746 за 1 сек
#     20.01289272,
#     9.0064204,
#     9.39361828,
#     9.70944951,
#     10.98131839,
#     16.01567219
# ]) * 2 * np.pi

# omega = np.array([
#     125.66745623,
#     10.0 * 2 * np.pi,
#     10.0 * 2 * np.pi,
#     10.0 * 2 * np.pi,
#     10.0 * 2 * np.pi,
#     100.53383979
# ])

# omega = np.array([  # вкл если 6-й ДВЗ находится на 1.5 0 0
#     138.03597158,
#     10.0 * 2 * np.pi,
#     10.0 * 2 * np.pi,
#     10.0 * 2 * np.pi,
#     10.0 * 2 * np.pi,
#     100.8158072
# ])

# omega = np.array([
#     10e-16,  # може в формулі косяк ??? воно впливає на кут нахилу чомусь
#     50.0 * 2 * np.pi,
#     50.0 * 2 * np.pi,
#     50.0 * 2 * np.pi,
#     50.0 * 2 * np.pi,
#     0.0
# ])

omega = np.array([
    0,  # може в формулі косяк ??? воно впливає на кут нахилу чомусь
    297.13633235,
    297.13633235,
    297.13633235,
    297.13633235,
    0.0
])


def start_bpla(t=None, state=None):

    if state is None:
        state = [
            pos, v,
            psi, teta, gamma,
            Om, omega, eps
        ]

    if t is None:
        t = time

    bpla = BPLA(
        t,
        I, m, dt, J, J0, Kf, Kf0,
        Km, Km0, p, G, Ks, H_, end_pos,
        Vx_, Vymax, Vz_, c,
        state
    )
    bpla.launch()

    return bpla.states
